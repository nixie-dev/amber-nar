// Amber-NAR Â© Karim Vergnes <me@thesola.io>
// Licensed under GNU GPLv2
// NARString extraction utility

import { parse_number } from "std/text"

/// Calculate the 8-byte aligned size of a NAR string from its effective size.
pub fun get_padded_length(length: Num): Num
{
    let padding = 8 - (length % 8)

    if padding < 8:
        return length + padding
    else:
        return length
}

/// Assuming the file descriptor is at the start of a NARString, returns
/// the length of the NARString leaving the file descriptor at the end of the
/// length block.
///
/// Can be used to skip unwanted NARStrings.
pub fun read_nar_length(file: Text = "/dev/stdin", offset: Num = 0): Num?
{
    let length_raw = $tail -c -{offset} < {file} | od -t d8 -N8 -An$?

    return parse_number(length_raw)?
}

/// Assuming the file descriptor is at the start of a NARString, reads and
/// returns the value of that NARString leaving the file descriptor at the
/// start of the next one.
pub fun read_nar_string(file: Text = "/dev/stdin", offset: Num = 0): Text?
{
    let length = read_nar_length(file, offset)?
    let padded_length = get_padded_length(length)
    let padding = padded_length - length

    return $tail -c -{offset + 8} < {file} | head -c {length}$?
}
